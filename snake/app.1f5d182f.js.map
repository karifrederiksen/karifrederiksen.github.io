{"version":3,"sources":["src/snake/core.ts","src/snake/glsl.ts","src/snake/rendering.ts","src/snake/game.ts","src/app.ts"],"names":[],"mappings":"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","file":"app.1f5d182f.js","sourceRoot":"..","sourcesContent":["import { Vec2 } from \"./vec2\"\r\n\r\nexport const enum Dir {\r\n    Left,\r\n    Up,\r\n    Right,\r\n    Down,\r\n}\r\n\r\nexport const enum GameState {\r\n    InProgress,\r\n    InProgressAndPaused,\r\n    Lost,\r\n    Won,\r\n}\r\n\r\nexport type Grid = readonly number[][]\r\n\r\nexport interface Game {\r\n    readonly initArgs: InitArgs\r\n    readonly gridSize: Vec2\r\n    readonly grid: Grid\r\n    readonly snake: Snake\r\n    noms: Vec2\r\n    state: GameState\r\n}\r\n\r\nexport interface Snake {\r\n    length: number\r\n    direction: Dir\r\n    nextDirection: Dir\r\n    nextNextDirection: Dir | null\r\n    position: Vec2\r\n}\r\n\r\nexport interface InitArgs {\r\n    readonly gridSize: Vec2\r\n    readonly dir: Dir\r\n    readonly position: Vec2\r\n    readonly snakeLength: number\r\n}\r\n\r\nexport function init(args: InitArgs): Game {\r\n    const [width, height] = args.gridSize\r\n    const grid = createGrid(width, height)\r\n    return {\r\n        initArgs: args,\r\n        state: GameState.InProgress,\r\n        gridSize: args.gridSize,\r\n        grid,\r\n        snake: {\r\n            direction: args.dir,\r\n            nextDirection: args.dir,\r\n            nextNextDirection: null,\r\n            length: args.snakeLength,\r\n            position: args.position,\r\n        },\r\n        noms: getRandomPosition(grid, width, height),\r\n    }\r\n}\r\n\r\nexport function reinit(game: Game): void {\r\n    const { snake, grid, gridSize, initArgs } = game\r\n    const [width, height] = gridSize\r\n    for (let x = 0; x < width; x++) {\r\n        for (let y = 0; y < height; y++) {\r\n            grid[x][y] = 0\r\n        }\r\n    }\r\n    game.noms = getRandomPosition(grid, width, height)\r\n    game.state = GameState.InProgress\r\n    snake.direction = initArgs.dir\r\n    snake.nextDirection = initArgs.dir\r\n    snake.nextNextDirection = null\r\n    snake.length = initArgs.snakeLength\r\n    snake.position = initArgs.position\r\n}\r\n\r\nfunction getRandomPosition(grid: Grid, width: number, height: number): Vec2 {\r\n    const x = Math.floor(Math.random() * width)\r\n    const y = Math.floor(Math.random() * height)\r\n    if (grid[x][y] > 0) {\r\n        return getRandomPosition(grid, width, height)\r\n    }\r\n    return [x, y]\r\n}\r\n\r\nfunction createGrid(width: number, height: number): Grid {\r\n    const arr = new Array<number[]>(width)\r\n    for (let x = 0; x < width; x++) {\r\n        const subArr = new Array<number>(height)\r\n        for (let y = 0; y < height; y++) {\r\n            subArr[y] = 0\r\n        }\r\n        arr[x] = subArr\r\n    }\r\n    return arr\r\n}\r\n\r\nexport function update(game: Game): void {\r\n    const nextPosition = getNextPosition(game, game.snake.nextDirection)\r\n    if (isCollision(game, nextPosition)) {\r\n        game.state = GameState.Lost\r\n        return\r\n    }\r\n    const [x, y] = nextPosition\r\n    const { grid, snake, noms, gridSize } = game\r\n    const [width, height] = gridSize\r\n    snake.position = [x, y]\r\n\r\n    if (x === noms[0] && y === noms[1]) {\r\n        snake.length++\r\n        grid[x][y] = snake.length\r\n        game.noms = getRandomPosition(grid, width, height)\r\n    } else {\r\n        for (let x = 0; x < width; x++) {\r\n            for (let y = 0; y < height; y++) {\r\n                if (grid[x][y] > 0) {\r\n                    grid[x][y]--\r\n                }\r\n            }\r\n        }\r\n        grid[x][y] = snake.length\r\n    }\r\n    snake.direction = snake.nextDirection\r\n    snake.nextDirection =\r\n        snake.nextNextDirection !== null\r\n            ? snake.nextNextDirection\r\n            : snake.nextDirection\r\n    snake.nextNextDirection = null\r\n}\r\n\r\nfunction getNextPosition({ grid, snake }: Game, direction: Dir): Vec2 {\r\n    const [x, y] = snake.position\r\n    switch (direction) {\r\n        case Dir.Left:\r\n            return [x - 1, y]\r\n        case Dir.Up:\r\n            return [x, y - 1]\r\n        case Dir.Right:\r\n            return [x + 1, y]\r\n        case Dir.Down:\r\n            return [x, y + 1]\r\n    }\r\n}\r\n\r\nfunction isCollision(\r\n    { grid, gridSize: [width, height] }: Game,\r\n    [x, y]: Vec2,\r\n): boolean {\r\n    return x >= width || x < 0 || y >= height || y < 0 || grid[x][y] > 1\r\n}\r\n\r\nexport function setDirection({ snake }: Game, direction: Dir): void {\r\n    // Disallow 180 degree turns\r\n    if (snake.direction === snake.nextDirection) {\r\n        if (isDirectionAllowed(snake.direction, direction)) {\r\n            snake.nextDirection = direction\r\n        }\r\n    } else {\r\n        if (isDirectionAllowed(snake.nextDirection, direction)) {\r\n            snake.nextNextDirection = direction\r\n        }\r\n    }\r\n}\r\n\r\nfunction isDirectionAllowed(current: Dir, next: Dir): boolean {\r\n    switch (current) {\r\n        case Dir.Left:\r\n            return next !== Dir.Right\r\n        case Dir.Right:\r\n            return next !== Dir.Left\r\n        case Dir.Up:\r\n            return next !== Dir.Down\r\n        case Dir.Down:\r\n            return next !== Dir.Up\r\n    }\r\n}\r\n\r\nexport function getScore({ snake, initArgs }: Game): number {\r\n    return snake.length - initArgs.snakeLength\r\n}\r\n","export function createProgram(\r\n    gl: WebGLRenderingContext,\r\n    vSrc: string,\r\n    fSrc: string,\r\n): WebGLProgram | null {\r\n    const vShader = compileShader(gl, vSrc, WebGLRenderingContext.VERTEX_SHADER)\r\n    const fShader = compileShader(\r\n        gl,\r\n        fSrc,\r\n        WebGLRenderingContext.FRAGMENT_SHADER,\r\n    )\r\n\r\n    if (vShader === null || fShader === null) {\r\n        return null\r\n    }\r\n\r\n    const program = gl.createProgram()\r\n\r\n    if (program === null) {\r\n        console.error(\"Failed to create program\")\r\n        return null\r\n    }\r\n\r\n    gl.attachShader(program, vShader)\r\n    gl.attachShader(program, fShader)\r\n\r\n    const linkedProgram = linkProgram(gl, program)\r\n\r\n    gl.deleteShader(vShader)\r\n    gl.deleteShader(fShader)\r\n\r\n    return linkedProgram\r\n}\r\n\r\nfunction compileShader(\r\n    gl: WebGLRenderingContext,\r\n    src: string,\r\n    shaderType: number,\r\n) {\r\n    const shader = gl.createShader(shaderType)\r\n    if (shader === null) {\r\n        console.error(\"Failed to create shader.\")\r\n        return null\r\n    }\r\n    gl.shaderSource(shader, src)\r\n    gl.compileShader(shader)\r\n\r\n    if (gl.getShaderParameter(shader, WebGLRenderingContext.COMPILE_STATUS))\r\n        return shader\r\n\r\n    console.group(\"Failed to compile shader\")\r\n    console.error(\"shader info log: \", gl.getShaderInfoLog(shader))\r\n    const prettySrc = withNumberedLines(src)\r\n    console.log(prettySrc)\r\n    console.groupEnd()\r\n    gl.deleteShader(shader)\r\n    return null\r\n}\r\n\r\nfunction linkProgram(\r\n    gl: WebGLRenderingContext,\r\n    program: WebGLProgram,\r\n): WebGLProgram | null {\r\n    gl.linkProgram(program)\r\n    if (\r\n        program !== null ||\r\n        gl.getProgramParameter(program, WebGLRenderingContext.LINK_STATUS)\r\n    )\r\n        return program\r\n\r\n    console.group(\"Failed to link program\")\r\n    console.error(\"error: \", gl.getError())\r\n    console.log(\r\n        \"validate status: \",\r\n        gl.getProgramParameter(program, WebGLRenderingContext.VALIDATE_STATUS),\r\n    )\r\n    console.log(\"program info log: \", gl.getProgramInfoLog(program))\r\n    console.groupEnd()\r\n\r\n    gl.deleteProgram(program)\r\n    return null\r\n}\r\n\r\nfunction withNumberedLines(src: string): string {\r\n    const lines = src.split(\"\\n\")\r\n\r\n    const lineNumberLength = lines.length.toString().length\r\n\r\n    return lines\r\n        .map(\r\n            (line, index) =>\r\n                padStart(index.toString(10), lineNumberLength, \"0\") +\r\n                \"| \" +\r\n                line,\r\n        )\r\n        .join(\"\\n\")\r\n}\r\n\r\nfunction padStart(text: string, length: number, fillChar: string): string {\r\n    const padCount = length - text.length\r\n    if (padCount <= 0) return text\r\n\r\n    const pad = []\r\n    for (let i = 0; i < padCount; i++) pad.push(fillChar)\r\n    pad.push(text)\r\n    return pad.join(\"\")\r\n}\r\n","import { Vec2 } from \"./vec2\"\r\nimport { createProgram } from \"./glsl\"\r\n\r\nexport interface Color {\r\n    readonly r: number\r\n    readonly g: number\r\n    readonly b: number\r\n}\r\n\r\nconst ATTRIBUTE_COUNT = 5\r\n\r\nconst VERTEX_SRC: string = `\r\nprecision highp float;\r\n\r\nattribute vec2 a_position;\r\nattribute vec3 a_color;\r\n\r\nuniform vec2 canvas_resolution;\r\n\r\nvarying vec3 v_color;\r\n\r\nvoid main() {\r\n    vec2 pos = (a_position / canvas_resolution) * vec2(2.0, -2.0) + vec2(-1.0, 1.0);\r\n    gl_Position = vec4(pos, 0.0, 1.0);\r\n    v_color = a_color;\r\n}\r\n`\r\n\r\nconst FRAGMENT_SRC: string = `\r\nprecision highp float;\r\n\r\nvarying vec3 v_color;\r\n\r\nvoid main() {\r\n    gl_FragColor = vec4(v_color, 1.0);\r\n}\r\n`\r\n\r\nexport class GridRenderingContext {\r\n    private readonly program: WebGLProgram\r\n    private readonly buf: WebGLBuffer\r\n    private readonly array: Float32Array\r\n    private readonly sizeUniform: WebGLUniformLocation\r\n    private readonly blockSize: Vec2\r\n\r\n    constructor(\r\n        private readonly gl: WebGL2RenderingContext,\r\n        private readonly canvasSize: Vec2,\r\n        private readonly gridSize: Vec2,\r\n    ) {\r\n        this.blockSize = [\r\n            Math.ceil(canvasSize[0] / gridSize[0]),\r\n            Math.ceil(canvasSize[1] / gridSize[1]),\r\n        ]\r\n        this.program = createProgram(gl, VERTEX_SRC, FRAGMENT_SRC)!\r\n        const blockCount = gridSize[0] * gridSize[1]\r\n        this.buf = gl.createBuffer()!\r\n        this.array = new Float32Array(blockCount * 6 * ATTRIBUTE_COUNT)\r\n        this.sizeUniform = gl.getUniformLocation(\r\n            this.program,\r\n            \"canvas_resolution\",\r\n        )!\r\n\r\n        gl.useProgram(this.program)\r\n        gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA)\r\n        gl.bindAttribLocation(this.program, 0, \"a_position\")\r\n        gl.bindAttribLocation(this.program, 1, \"a_color\")\r\n    }\r\n\r\n    bufferGrid(f: (x: number, y: number) => Color): void {\r\n        const { array, gridSize, blockSize } = this\r\n        const [blockWidth, blockHeight] = blockSize\r\n        let o = 0\r\n        for (let y = 0; y < gridSize[1]; y++) {\r\n            const y0 = y * blockHeight\r\n            const y1 = y0 + blockHeight\r\n            for (let x = 0; x < gridSize[0]; x++) {\r\n                const x0 = x * blockWidth\r\n                const x1 = x0 + blockWidth\r\n\r\n                const { r, g, b } = f(x, y)\r\n                // triangle 1\r\n                array[o++] = x0\r\n                array[o++] = y0\r\n                array[o++] = r\r\n                array[o++] = g\r\n                array[o++] = b\r\n                array[o++] = x0\r\n                array[o++] = y1\r\n                array[o++] = r\r\n                array[o++] = g\r\n                array[o++] = b\r\n                array[o++] = x1\r\n                array[o++] = y0\r\n                array[o++] = r\r\n                array[o++] = g\r\n                array[o++] = b\r\n                // triangle 2\r\n                array[o++] = x1\r\n                array[o++] = y1\r\n                array[o++] = r\r\n                array[o++] = g\r\n                array[o++] = b\r\n                array[o++] = x0\r\n                array[o++] = y1\r\n                array[o++] = r\r\n                array[o++] = g\r\n                array[o++] = b\r\n                array[o++] = x1\r\n                array[o++] = y0\r\n                array[o++] = r\r\n                array[o++] = g\r\n                array[o++] = b\r\n            }\r\n        }\r\n    }\r\n\r\n    setColor(x: number, y: number, { r, g, b }: Color): void {\r\n        const { array, gridSize, blockSize } = this\r\n        const [blockWidth, blockHeight] = blockSize\r\n\r\n        let o = (gridSize[0] * y + x) * 6 * ATTRIBUTE_COUNT\r\n        const y0 = y * blockHeight\r\n        const y1 = y0 + blockHeight\r\n        const x0 = x * blockWidth\r\n        const x1 = x0 + blockWidth\r\n\r\n        // triangle 1\r\n        array[o++] = x0\r\n        array[o++] = y0\r\n        array[o++] = r\r\n        array[o++] = g\r\n        array[o++] = b\r\n        array[o++] = x0\r\n        array[o++] = y1\r\n        array[o++] = r\r\n        array[o++] = g\r\n        array[o++] = b\r\n        array[o++] = x1\r\n        array[o++] = y0\r\n        array[o++] = r\r\n        array[o++] = g\r\n        array[o++] = b\r\n        // triangle 2\r\n        array[o++] = x1\r\n        array[o++] = y1\r\n        array[o++] = r\r\n        array[o++] = g\r\n        array[o++] = b\r\n        array[o++] = x0\r\n        array[o++] = y1\r\n        array[o++] = r\r\n        array[o++] = g\r\n        array[o++] = b\r\n        array[o++] = x1\r\n        array[o++] = y0\r\n        array[o++] = r\r\n        array[o++] = g\r\n        array[o++] = b\r\n    }\r\n\r\n    flush(): void {\r\n        const { gl, canvasSize, gridSize } = this\r\n        const blockCount = gridSize[0] * gridSize[1]\r\n\r\n        gl.bindBuffer(gl.ARRAY_BUFFER, this.buf)\r\n        gl.bufferData(gl.ARRAY_BUFFER, this.array, gl.DYNAMIC_DRAW)\r\n\r\n        gl.uniform2f(this.sizeUniform, canvasSize[0], canvasSize[1])\r\n\r\n        const STRIDE = ATTRIBUTE_COUNT * 4\r\n        gl.vertexAttribPointer(0, 2, gl.FLOAT, false, STRIDE, 0)\r\n        gl.vertexAttribPointer(1, 3, gl.FLOAT, false, STRIDE, 8)\r\n        gl.enableVertexAttribArray(0)\r\n        gl.enableVertexAttribArray(1)\r\n\r\n        gl.drawArrays(gl.TRIANGLES, 0, blockCount * 6)\r\n    }\r\n}\r\n","import { Game, GameState, Dir } from \"./core\"\r\nimport * as Core from \"./core\"\r\nimport { GridRenderingContext, Color } from \"./rendering\"\r\n\r\n// CONFIG //\r\nconst MS_PER_TICK = 100\r\n\r\nconst GRID_WIDTH = 20\r\nconst GRID_HEIGHT = 20\r\n\r\nconst SNAKE_INIT_LENGTH = 4\r\nconst SNAKE_INIT_DIR = Dir.Right\r\nconst SNAKE_INIT_X = 1\r\nconst SNAKE_INIT_Y = 1\r\n////////////\r\n\r\nexport interface GameWrapper {\r\n    game: Game\r\n    needsRender: boolean\r\n    statusContainer: HtmlTextRef\r\n    scoreContainer: HtmlTextRef\r\n}\r\n\r\nexport class HtmlTextRef {\r\n    private _content: string\r\n    private _color: string\r\n\r\n    constructor(readonly elem: HTMLElement) {\r\n        this._content = elem.textContent ?? \"\"\r\n        this._color = elem.style.color\r\n    }\r\n\r\n    content(value: string): void {\r\n        if (this._content !== value) {\r\n            this._content = value\r\n            this.elem.textContent = value\r\n        }\r\n    }\r\n\r\n    color(value: string): void {\r\n        if (this._color !== value) {\r\n            this._color = value\r\n            this.elem.style.color = value\r\n        }\r\n    }\r\n}\r\n\r\nfunction overlay(canvas: HTMLCanvasElement, elem: HTMLElement): void {\r\n    canvas.before(elem)\r\n    elem.style.position = \"absolute\"\r\n    elem.style.width = canvas.width + \"px\"\r\n    elem.style.height = canvas.height + \"px\"\r\n}\r\n\r\nexport function start(canvas: HTMLCanvasElement): void {\r\n    const wglCtx = canvas.getContext(\"webgl2\", { desynchronized: true })!\r\n    const game: GameWrapper = {\r\n        game: Core.init({\r\n            gridSize: [GRID_WIDTH, GRID_HEIGHT],\r\n            dir: SNAKE_INIT_DIR,\r\n            snakeLength: SNAKE_INIT_LENGTH,\r\n            position: [SNAKE_INIT_X, SNAKE_INIT_Y],\r\n        }),\r\n        needsRender: true,\r\n        statusContainer: new HtmlTextRef(document.createElement(\"div\")),\r\n        scoreContainer: new HtmlTextRef(document.createElement(\"div\")),\r\n    }\r\n    canvas.before(game.scoreContainer.elem)\r\n    canvas.before(game.statusContainer.elem)\r\n    overlay(canvas, game.scoreContainer.elem)\r\n    game.scoreContainer.elem.style.fontSize = \"28px\"\r\n    game.scoreContainer.elem.style.color = \"rgb(0, 235, 255)\"\r\n    game.scoreContainer.elem.style.padding = \"16px 0px 0px 16px\"\r\n    overlay(canvas, game.statusContainer.elem)\r\n    game.scoreContainer.elem.style.fontSize = \"28px\"\r\n    game.statusContainer.elem.style.font = \"72px Roboto\"\r\n    game.statusContainer.elem.style.textAlign = \"center\"\r\n    game.statusContainer.elem.style.verticalAlign = \"middle\"\r\n\r\n    const ctx = new GridRenderingContext(\r\n        wglCtx,\r\n        [canvas.width, canvas.height],\r\n        game.game.gridSize,\r\n    )\r\n\r\n    window.addEventListener(\"keydown\", (ev) => {\r\n        if (handleInput(game, ev)) {\r\n            ev.preventDefault()\r\n            ev.stopPropagation()\r\n        }\r\n    })\r\n\r\n    renderLoop(ctx, game)\r\n\r\n    setInterval(() => update(game), MS_PER_TICK)\r\n}\r\n\r\nfunction renderLoop(ctx: GridRenderingContext, wrapper: GameWrapper): void {\r\n    render(ctx, wrapper)\r\n    requestAnimationFrame(() => renderLoop(ctx, wrapper))\r\n}\r\n\r\nexport function render(ctx: GridRenderingContext, wrapper: GameWrapper): void {\r\n    const time = performance.now()\r\n    if (wrapper.needsRender) {\r\n        if (wrapper.game.state === GameState.InProgress) {\r\n            renderGrid(ctx, wrapper.game)\r\n        }\r\n        wrapper.needsRender = false\r\n    }\r\n    renderNoms(ctx, wrapper.game, time)\r\n    ctx.flush()\r\n    renderStatus(wrapper)\r\n    renderScore(wrapper)\r\n}\r\n\r\nfunction renderStatus(game: GameWrapper) {\r\n    switch (game.game.state) {\r\n        case GameState.InProgress:\r\n            game.statusContainer.content(\"\")\r\n            break\r\n        case GameState.InProgressAndPaused:\r\n            game.statusContainer.content(\"Paused\")\r\n            game.statusContainer.color(\"rgb(240, 20, 20)\")\r\n            break\r\n        case GameState.Lost:\r\n            game.statusContainer.content(\"You died\")\r\n            game.statusContainer.color(\"rgb(255, 0, 0)\")\r\n            break\r\n        case GameState.Won:\r\n            game.statusContainer.content(\"You won?\")\r\n            game.statusContainer.color(\"rgb(255, 0, 0)\")\r\n            break\r\n    }\r\n}\r\n\r\nfunction lerp(pct: number, from: number, to: number): number {\r\n    return from + pct * (to - from)\r\n}\r\n\r\nfunction lerpSnakeStyle(pct: number): Color {\r\n    return {\r\n        r: lerp(pct, 0.6, 0.8),\r\n        g: lerp(pct, 0.6, 1),\r\n        b: lerp(pct, 0.5, 0.4),\r\n    }\r\n}\r\n\r\nfunction renderNoms(ctx: GridRenderingContext, game: Game, time: number): void {\r\n    const [x, y] = game.noms\r\n    ctx.setColor(x, y, nomStyle(time))\r\n}\r\n\r\nfunction nomStyle(time: number): Color {\r\n    const b = (time % 100) / 100\r\n    const g = (time % 200) / 200\r\n    return { r: 1, g: g, b: b }\r\n}\r\n\r\nfunction renderGrid(ctx: GridRenderingContext, game: Game): void {\r\n    ctx.bufferGrid((x, y) => {\r\n        const val = game.grid[x][y]\r\n        if (val > 0) {\r\n            if (val == game.snake.length) {\r\n                // Head\r\n                return { r: 1, g: 1, b: 1 }\r\n            }\r\n            // Tail\r\n            const pct = game.grid[x][y] / game.snake.length\r\n            return lerpSnakeStyle(pct)\r\n        }\r\n        // Empty block\r\n        return { r: 0, g: 0, b: 0 }\r\n    })\r\n}\r\n\r\nfunction renderScore(game: GameWrapper): void {\r\n    const score = Core.getScore(game.game)\r\n    const maxScore = game.game.gridSize[0] * game.game.gridSize[1]\r\n    const pct = score / maxScore\r\n    game.scoreContainer.content(score.toString())\r\n    const r = Math.round(lerp(pct, 0, 255))\r\n    const b = Math.round(lerp(pct, 255, 0))\r\n    game.scoreContainer.color(`rgb(${r}, 255, ${b})`)\r\n}\r\n\r\nexport function update(wrapper: GameWrapper): void {\r\n    const game = wrapper.game\r\n    switch (game.state) {\r\n        case GameState.InProgress:\r\n            Core.update(game)\r\n            wrapper.needsRender = true\r\n            break\r\n        default:\r\n            break\r\n    }\r\n}\r\n\r\nexport function handleInput(\r\n    wrapper: GameWrapper,\r\n    event: KeyboardEvent,\r\n): boolean {\r\n    const code = event.code\r\n    switch (wrapper.game.state) {\r\n        case GameState.InProgress:\r\n            return handleGameInput(wrapper, code)\r\n        case GameState.InProgressAndPaused:\r\n            return handlePausedInput(wrapper, code)\r\n        case GameState.Lost:\r\n        case GameState.Won:\r\n            return handleGameEndedInput(wrapper, code)\r\n    }\r\n}\r\n\r\nfunction handleGameEndedInput(wrapper: GameWrapper, key: string): boolean {\r\n    switch (key) {\r\n        case \"Enter\":\r\n        case \"Escape\":\r\n        case \"Space\":\r\n            wrapper.game = Core.init(wrapper.game.initArgs)\r\n            wrapper.needsRender = true\r\n            return true\r\n        default:\r\n            return false\r\n    }\r\n}\r\n\r\nfunction handleGameInput(wrapper: GameWrapper, key: string): boolean {\r\n    const game = wrapper.game\r\n    switch (key) {\r\n        case \"Enter\":\r\n        case \"Escape\":\r\n        case \"Space\":\r\n            game.state = GameState.InProgressAndPaused\r\n            wrapper.needsRender = true\r\n            return true\r\n        case \"ArrowLeft\":\r\n        case \"KeyA\":\r\n            Core.setDirection(game, Dir.Left)\r\n            return true\r\n        case \"ArrowUp\":\r\n        case \"KeyW\":\r\n            Core.setDirection(game, Dir.Up)\r\n            return true\r\n        case \"ArrowRight\":\r\n        case \"KeyD\":\r\n            Core.setDirection(game, Dir.Right)\r\n            return true\r\n        case \"ArrowDown\":\r\n        case \"KeyS\":\r\n            Core.setDirection(game, Dir.Down)\r\n            return true\r\n        default:\r\n            return false\r\n    }\r\n}\r\n\r\nfunction handlePausedInput({ game }: GameWrapper, key: string): boolean {\r\n    switch (key) {\r\n        case \"Enter\":\r\n        case \"Escape\":\r\n        case \"Space\":\r\n            game.state = GameState.InProgress\r\n            return true\r\n        default:\r\n            return false\r\n    }\r\n}\r\n","import { start } from \"./snake/game\"\r\n\r\nconst container = document.getElementById(\"game-container\") as HTMLCanvasElement | null\r\n\r\nif (container) {\r\n    start(container)\r\n}"]}